•	For (ultimate frisbee) players:
a.	What attributes does a player have?
    --> first name                       (private final String)
    --> last name                        (private final String)
    --> age                              (private final int)
    --> game matching gender             (private       String)
    --> jersey number                    (private final int)
    --> role                             (private final String)
    --> games per season                 (private static final int)
    --> current game number              (private static int)
    --> initial score and assisted value (private static final int)
    --> goals scored each game           (private final Map<Integer>)
    --> goals assisted each game         (private final Map<Integer>)
    --> goals scored this season         (private final int)
    --> goals assisted this season       (private final int)
    --> years of experience              (private final int)
    --> team name                        (private final String)


b.	What fields would be required?
    --> firstName                                                     where firstName cannot be null or a blank string
    --> lastName                                                      where lastName cannot be null or a blank string
    --> age                                                           where age >= 17
    --> gameMatchingGender                                            where gameMatchingGender.equals("men") ||
                                                                            gameMatchingGender.equals("women")
    --> jerseyNumber                                                  where jerseyNumber >= -999 &&
                                                                             jerseyNumber <= 999
    --> role                                                          where role.equals("handler) ||
                                                                            role.equals("cutter)
    --> GAMES_PER_SEASON                                              where GAMES_PER_SEASON > 0
    --> currentGameNumber                                             where currentGameNumber is 0
    --> INITIAL_SCORE_AND_ASSIST                                      where INITIAL_SCORE_AND_ASSIST is 0
    --> goalsScoredEachGame                                           where goals scored for each game must be greater or equal to 0
    --> goalsAssistedEachGame                                         where goals assisted for each game must be greater or equal to 0
    --> goalsScoredThisSeason                                         where goalsScoredThisSeason >= 0
    --> goalsAssistedThisSeason                                       where goalsAssistedThisSeason >= 0
    --> yearsOfExperience                                             where yearsOfExperience >= 0
    --> teamName                                                      where teamName cannot be null or a blank string

c.	What constructors are required to create players?
    --> one that initializes the player's: - firstName
                                           - lastName
                                           - age
                                           - gameMatchingGender
                                           - jerseyNumber
                                           - role
                                           - GAMES_PER_SEASON
                                           - currentGameNumber
                                           - INITIAL_SCORE_AND_ASSIST
                                           - goalsScoredThisGame     (to 0 initially)
                                           - goalsAssistedThisGame   (to 0 initially)
                                           - goalsScoredThisSeason   (all to 0 initially)
                                           - goalsAssistedThisSeason (all to 0 initially)
                                           - yearsOfExperience
                                           - teamName
    --> checks for illegal arguments

d.	What validations are required?
    --> throws illegalArgumentException for null or blank strings
    --> throws illegalArgumentException for age less than 17 or greater than 122
    --> throws illegalArgumentException for gameMatchingGender that is neither "men" nor "women"
    --> throws illegalArgumentException for jerseyNumber that exceeds three integer digits long
    --> throws illegalArgumentException for role that is neither "handler" nor "cutter"
    --> throws illegalArgumentException for GAMES_PER_SEASON < 0
    --> throws illegalArgumentException for currentGameNumber < 1 or currentGameNumber > GAMES_PER_SEASON - 1
    --> throws illegalArgumentException for INITIAL_SCORE_AND_ASSIST != 0
    --> throws illegalArgumentException for goalsAssistedThisSeason < 0
    --> throws illegalArgumentException for goalsAssistedThisSeason < 0
    --> throws illegalArgumentException for yearsOfExperience < 0

e.	What functions does a player perform?
    --> public void printPlayerInfo()                                    outputs a string in the format: "Johnny Appleseed: age 99, man-matching, jersey number 25, handler, 5 years experience"
                                                                                                         "Team: Angus Fan Club"
                                                                                                         "Goals scored this game:     10"
                                                                                                         "Goals assisted this game:   10"
                                                                                                         "Goals scored this season:   10"
                                                                                                         "Goals assisted this season: 10"
    --> public void cheerForTeammates()                                  outputs one of the following (randomly selected) cheer (string) for team: "Wohoo, let's go team!"
                                                                                                                                                   "Yeah! GO TEAM!"
                                                                                                                                                   "Fire it up teamName!"
                                                                                                                                                   "Fight team fight!"
                                                                                                                                                   "We’ve got spirit, yes we do! We’ve got spirit, how about you?
                                                                                                                                                    We’ve got strength, yes we do! We’ve got strength, how about you?
                                                                                                                                                    We’re the champions, we’re on top! When it comes to ultimate we never stop!"
    --> public void callFoul(final Player firstName,
                             final Player lastName)                      outputs a string in the format: "Johnny Appleseed calls foul on Adam Smith." and calls the scores() method 50% of the time
    --> public void callTravel(final Player firstName,
                               final Player lastName)                    outputs a string in the format: "Johnny Appleseed calls travel on Adam Smith."
    --> public void contestCall(final Player firstName,
                                final Player lastName)                   outputs a string in the format: "Adam Smith contests the stoppage call."
    --> public void huck(final Player firstName,
                         final Player lastName)                          outputs a string in the format: "Johnny Appleseed sends the disc deep to Adam Smith!" and calls the scores() method 50% of the time
    --> public void cut()                                                outputs a string in the format: "Johnny Appleseed makes a sharp cut!"
    --> public void handlerCut()                                         outputs a string in the format: "Johnny Appleseed makes a handler cut!"
    --> public void getsOpenForPass()                                    outputs a string in the format: "Johnny Appleseed gets open to receive a throw."
    --> public void strikeDeep()                                         outputs a string in the format: "Johnny Appleseed makes strikes deep!"
    --> public void callInjurySubstitute()                               outputs a string in the format: "Johnny Appleseed calls for an injury substitute."
    --> public void forehandThrow(final Player firstName,
                                  final Player lastName)                 outputs a string in the format: "Johnny Appleseed makes a forehand throw to Adam Smith!" and calls the scores() method 50% of the time
    --> public void backhandThrow(final Player firstName,
                                  final Player lastName)                 outputs a string in the format: "Johnny Appleseed makes a backhand throw to Adam Smith!" and calls the scores() method 50% of the time
    --> public void scores(final Player catcherFirstName,
                           final Player catcherLastName)                 outputs a string in the format: "...AND ADAM SMITH SCORES!" and increments this player's goalsAssistedEachGame[currentGameNumber -1] the catcher's goalsScoredEachGame[currentGameNumber -1]
    --> public void setGameMatchingGender(final String genderMatch)      sets the gameMatchingGender to "men" or "women", else throw IllegalArgumentException
    --> public void setCurrentGameNumber(final int gameNumber)           sets the currentGameNumber to another value that is less or equal to GAMES_PER_SEASON, else throw IllegalArgumentException





•	For teams:
a.	What attributes does a team have?
    --> team name                                         (private final String)
    --> roster                                            (private final ArrayList<Players>)
    --> coach                                             (private final String)
    --> number of games this season                       (private final int)
    --> game location                                     (private final ArrayList<String>)
    --> time of games                                     (private final ArrayList<String>)
    --> spirit points                                     (private final double[])
    --> list of players who are matching against men      (private final Players[])
    --> list of players who are matching against women    (private final Players[])


b.	What fields would be required?
    --> teamName                   where teamName cannot be null or a blank string
    --> roster                     where the roster must contain greater or equal to 7 players
    --> coach                      where teamName cannot be null or a blank string
    --> NUM_OF_GAMES               where NUM_OF_GAMES >= 0
    --> gameLocation               where gameLocation must contain the same number of string elements as NUM_OF_GAMES
    --> gameTimes                  where gameTimes must contain the same number of "HH:MM" format strings as NUM_OF_GAMES
    --> spiritPoints               where spiritPoints must contain the same number of double elements as NUM_OF_GAMES; each element must be less than 0.0 or greater than 10.0
    --> matchingAgainstMen         where matchingAgainstMen have zero or more players
    --> matchingAgainstWomen       where matchingAgainstWomen have zero or more players

c.	What constructors are required to create teams?
    --> one that initializes the player's: - teamName
                                           - roster
                                           - coach
                                           - gameLocation
                                           - gameTimes
                                           - spiritPoints (all elements to 0.0 initially)
                                           - matchingAgainstMen
                                           - matchingAgainstWomen

    --> checks for illegal arguments

d.	What validations are required?
    --> throws an IllegalArgumentException for null or blank strings
    --> throws an IllegalArgumentException if the roster has fewer than 7 players
    --> throws an IllegalArgumentException if gameLocation does not contain NUM_OF_GAMES string elements
    --> throws an IllegalArgumentException if gameTimes does not contain NUM_OF_GAMES string elements
    --> throws an IllegalArgumentException if gameTimes contains an element that is not in the format of "HH:MM"
    --> throws an IllegalArgumentException if spiritPoints does not contain NUM_OF_GAMES string elements
    --> throws an IllegalArgumentException if spiritPoints has element that has a value less than 0.0 or greater than 10.0

e.	What functions does a team perform?
    -->






•	For the league:
a.	Same as above for the league
    -->
